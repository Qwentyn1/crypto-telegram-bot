import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from binance.client import Client
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")

client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

COINS = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "XRPUSDT", "ADAUSDT",
    "SOLUSDT", "DOGEUSDT", "MATICUSDT", "DOTUSDT", "LTCUSDT"
]

CHOOSING_ACTION, CHOOSING_COIN = range(2)

auto_signal_enabled = False

def get_main_menu():
    keyboard = [['–¶—ñ–Ω–∞', '–°–∏–≥–Ω–∞–ª'], ['–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', '–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª –í–∫–ª/–í–∏–∫–ª']]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=get_main_menu()
    )
    return CHOOSING_ACTION

async def choose_coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    global auto_signal_enabled

    if text in ['—Ü—ñ–Ω–∞', '—Å–∏–≥–Ω–∞–ª', '–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞']:
        context.user_data['action'] = text
        coins_buttons = [[coin[:-4]] for coin in COINS]
        coins_buttons.append(['–í—Å—ñ –º–æ–Ω–µ—Ç–∏'])
        reply_markup = ReplyKeyboardMarkup(coins_buttons, resize_keyboard=True)
        await update.message.reply_text(
            f"–û–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è {text}:",
            reply_markup=reply_markup
        )
        return CHOOSING_COIN
    elif text == '–∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª –≤–∫–ª/–≤–∏–∫–ª':
        auto_signal_enabled = not auto_signal_enabled
        state = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if auto_signal_enabled else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        await update.message.reply_text(f"–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª {state}.", reply_markup=get_main_menu())
        return CHOOSING_ACTION
    else:
        await update.message.reply_text(
            "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É.",
            reply_markup=get_main_menu()
        )
        return CHOOSING_ACTION

async def handle_coin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    coin_choice = update.message.text.upper()
    action = context.user_data.get('action')

    if coin_choice == '–í–°–Ü –ú–û–ù–ï–¢–ò':
        coins_to_check = COINS
    else:
        coin_full = coin_choice + "USDT"
        if coin_full not in COINS:
            await update.message.reply_text(
                "–ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–Ω–µ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É.",
                reply_markup=get_main_menu()
            )
            return CHOOSING_COIN
        coins_to_check = [coin_full]

    if action == '—Ü—ñ–Ω–∞':
        await show_price(update, coins_to_check)
    elif action == '—Å–∏–≥–Ω–∞–ª':
        await show_signal(update, coins_to_check)
    elif action == '–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞':
        await show_analytics(update, coins_to_check)
    else:
        await update.message.reply_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=get_main_menu()
        )
    # –ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_main_menu())
    return CHOOSING_ACTION

async def show_price(update: Update, coins):
    texts = []
    for coin in coins:
        try:
            ticker = client.get_symbol_ticker(symbol=coin)
            price = ticker['price']
            texts.append(f"{coin[:-4]}: {price} USD")
        except Exception:
            texts.append(f"{coin[:-4]}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏")
    await update.message.reply_text("\n".join(texts), reply_markup=ReplyKeyboardRemove())

async def show_signal(update: Update, coins):
    texts = []
    for coin in coins:
        try:
            klines = client.get_klines(symbol=coin, interval=Client.KLINE_INTERVAL_1HOUR, limit=2)
            if len(klines) < 2:
                texts.append(f"{coin[:-4]}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–≥–Ω–∞–ª—É")
                continue
            prev_close = float(klines[-2][4])
            last_close = float(klines[-1][4])
            if last_close > prev_close:
                signal = "üìà –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ö–£–ü–ò–¢–ò"
            elif last_close < prev_close:
                signal = "üìâ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ü–†–û–î–ê–¢–ò"
            else:
                signal = "‚ûñ –ë–µ–∑ –∑–º—ñ–Ω"
            texts.append(f"{coin[:-4]}: {signal} (–æ—Å—Ç. —Ü—ñ–Ω–∞: {last_close} USD)")
        except Exception:
            texts.append(f"{coin[:-4]}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É")
    await update.message.reply_text("\n".join(texts), reply_markup=ReplyKeyboardRemove())

async def show_analytics(update: Update, coins):
    texts = []
    for coin in coins:
        try:
            ticker_24h = client.get_ticker_24hr(symbol=coin)
            price_change = float(ticker_24h.get('priceChangePercent', 0))
            high_price = float(ticker_24h.get('highPrice', 0))
            low_price = float(ticker_24h.get('lowPrice', 0))
            texts.append(
                f"{coin[:-4]}:\n"
                f"–ó–º—ñ–Ω–∞ –∑–∞ 24–≥: {price_change:.2f}%\n"
                f"–ú–∞–∫—Å. —Ü—ñ–Ω–∞: {high_price} USD\n"
                f"–ú—ñ–Ω. —Ü—ñ–Ω–∞: {low_price} USD"
            )
        except Exception:
            texts.append(f"{coin[:-4]}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")
    await update.message.reply_text("\n\n".join(texts), reply_markup=ReplyKeyboardRemove())

async def auto_signal_task(application):
    global auto_signal_enabled
    while True:
        if auto_signal_enabled:
            try:
                texts = []
                for coin in COINS:
                    klines = client.get_klines(symbol=coin, interval=Client.KLINE_INTERVAL_15MINUTE, limit=2)
                    if len(klines) < 2:
                        continue
                    prev_close = float(klines[-2][4])
                    last_close = float(klines[-1][4])
                    if last_close > prev_close:
                        signal = "üìà –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ö–£–ü–ò–¢–ò"
                    elif last_close < prev_close:
                        signal = "üìâ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ü–†–û–î–ê–¢–ò"
                    else:
                        signal = None
                    if signal:
                        texts.append(f"{coin[:-4]}: {signal} (–æ—Å—Ç. —Ü—ñ–Ω–∞: {last_close} USD)")

                if texts:
                    msg = "[–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª {}]\n\n".format(datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")) + "\n".join(texts)
                    for chat_id in application.chat_data.keys():
                        await application.bot.send_message(chat_id=chat_id, text=msg)

            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—É: {e}")

        await asyncio.sleep(900)  # 15 —Ö–≤–∏–ª–∏–Ω

async def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_coin)],
            CHOOSING_COIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_coin_choice)],
        },
        fallbacks=[],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—É —è–∫ —Ñ–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    application.job_queue.run_repeating(lambda ctx: asyncio.create_task(auto_signal_task(application)), interval=900, first=10)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    await application.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()  # –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ RuntimeError –≤ Windows
    import asyncio
    asyncio.run(main())
